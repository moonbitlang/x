package moonbitlang/x/stack

alias @moonbitlang/core/immut/list as @list

// Values

// Types and methods
type Stack[T]
impl Stack {
  clear[T](Self[T]) -> Unit
  drop[T](Self[T]) -> Unit
  drop_result[T](Self[T]) -> Result[Unit, Unit]
  each[T](Self[T], (T) -> Unit) -> Unit
  equal[T : Eq](Self[T], Self[T]) -> Bool
  fold[T, U](Self[T], init~ : U, (U, T) -> U) -> U
  from_array[T](Array[T]) -> Self[T]
  from_list[T](@list.T[T]) -> Self[T]
  from_stack[T](Self[T]) -> Self[T]
  is_empty[T](Self[T]) -> Bool
  length[T](Self[T]) -> Int
  new[T]() -> Self[T]
  of[T](FixedArray[T]) -> Self[T]
  op_equal[T : Eq](Self[T], Self[T]) -> Bool
  peek[T](Self[T]) -> T?
  peek_exn[T](Self[T]) -> T
  pop[T](Self[T]) -> T?
  push[T](Self[T], T) -> Unit
  push_array[T](Self[T], Array[T]) -> Unit
  push_list[T](Self[T], @list.T[T]) -> Unit
  push_stack[T](Self[T], Self[T]) -> Unit
  return_with_clear[T](Self[T]) -> Self[T]
  to_array[T : Default](Self[T]) -> Array[T]
  to_list[T](Self[T]) -> @list.T[T]
  to_string[T : Show](Self[T]) -> String
  unsafe_pop[T](Self[T]) -> T
}
impl[T : Default] Default for Stack[T]
impl[T : Show] Show for Stack[T]

// Type aliases

// Traits

