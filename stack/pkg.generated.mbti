// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/x/stack"

import(
  "moonbitlang/core/list"
)

// Values

// Errors

// Types and methods
type Stack[T]
fn[T] Stack::clear(Self[T]) -> Unit
fn[T : Default] Stack::default() -> Self[T] // from trait `Default`
fn[T] Stack::drop(Self[T]) -> Unit
fn[T] Stack::drop_result(Self[T]) -> Result[Unit, Unit]
fn[T] Stack::each(Self[T], (T) -> Unit) -> Unit
fn[T : Eq] Stack::equal(Self[T], Self[T]) -> Bool
fn[T, U] Stack::fold(Self[T], init~ : U, (U, T) -> U) -> U
fn[T] Stack::from_array(Array[T]) -> Self[T]
fn[T] Stack::from_iter(Iter[T]) -> Self[T]
#deprecated
fn[T] Stack::from_list(@list.List[T]) -> Self[T]
fn[T] Stack::from_stack(Self[T]) -> Self[T]
fn[T] Stack::is_empty(Self[T]) -> Bool
fn[T] Stack::iter(Self[T]) -> Iter[T]
fn[T] Stack::length(Self[T]) -> Int
#as_free_fn
fn[T] Stack::new() -> Self[T]
#as_free_fn
fn[T] Stack::of(FixedArray[T]) -> Self[T]
fn[T : Eq] Stack::op_equal(Self[T], Self[T]) -> Bool
fn[T : Show] Stack::output(Self[T], &Logger) -> Unit // from trait `Show`
fn[T] Stack::peek(Self[T]) -> T?
#deprecated
fn[T] Stack::peek_exn(Self[T]) -> T
fn[T] Stack::pop(Self[T]) -> T?
fn[T] Stack::push(Self[T], T) -> Unit
fn[T] Stack::push_array(Self[T], Array[T]) -> Unit
#deprecated
fn[T] Stack::push_list(Self[T], @list.List[T]) -> Unit
fn[T] Stack::push_stack(Self[T], Self[T]) -> Unit
fn[T] Stack::return_with_clear(Self[T]) -> Self[T]
fn[T] Stack::to_array(Self[T]) -> Array[T]
#deprecated
fn[T] Stack::to_list(Self[T]) -> @list.List[T]
fn[T : Show] Stack::to_string(Self[T]) -> String // from trait `Show`
fn[T] Stack::unsafe_peek(Self[T]) -> T
fn[T] Stack::unsafe_pop(Self[T]) -> T
impl[T : Default] Default for Stack[T]
impl[T : Show] Show for Stack[T]

// Type aliases

// Traits

