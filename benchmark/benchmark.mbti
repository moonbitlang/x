package "moonbitlang/x/benchmark"

// Values
fn add(Criterion, Task) -> Unit

fn run(Task) -> TaskResult

// Types and methods
type Criterion
impl Criterion {
  add(Self, Task) -> Unit
  new() -> Self
  run(Self) -> Map[String, TaskResult]
}

type Task
impl Task {
  new(String, () -> Unit, count~ : Int = ..) -> Self
  run(Self) -> TaskResult
}

pub struct TaskResult {
  task : Task
  average : Double
  max : Double
  min : Double
}
impl Show for TaskResult

// Type aliases

// Traits

