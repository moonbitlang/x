// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/x/rational"

import(
  "moonbitlang/core/bigint"
  "moonbitlang/core/quickcheck"
)

// Values
fn from_double(Double) -> Rational[Int64] raise RationalError

fn[T : Integral] new(T, T) -> Rational[T]?

// Types and methods
type Rational[T]
fn[T : Integral] Rational::abs(Self[T]) -> Self[T]
fnalias Rational::abs
fn[T : Integral] Rational::ceil(Self[T]) -> T
fnalias Rational::ceil
fn[T : Integral] Rational::floor(Self[T]) -> T
fnalias Rational::floor
fn[T : Integral] Rational::fract(Self[T]) -> Self[T]
fnalias Rational::fract
fn[T : Integral] Rational::is_integer(Self[T]) -> Bool
fnalias Rational::is_integer
fn[T : Integral] Rational::reciprocal(Self[T]) -> Self[T]
fnalias Rational::reciprocal
fn Rational::to_double(Self[Int64]) -> Double
fn[T : Integral] Rational::trunc(Self[T]) -> T
fnalias Rational::trunc
impl[T : Integral] Add for Rational[T]
impl[T : Integral] Compare for Rational[T]
impl[T : Integral] Div for Rational[T]
impl[T : Integral] Eq for Rational[T]
impl[T : Integral] Mul for Rational[T]
impl[T : Integral] Neg for Rational[T]
impl[T : Integral] Show for Rational[T]
impl[T : Integral] Sub for Rational[T]
impl[T : Integral] @quickcheck.Arbitrary for Rational[T]

pub(all) suberror RationalError String
impl Eq for RationalError
impl Show for RationalError
impl ToJson for RationalError

// Type aliases
pub typealias Rational[@bigint.BigInt] as BigRational

pub typealias Rational[Int] as Rational32

pub typealias Rational[Int64] as Rational64

// Traits
trait Integral : Add + Sub + Mul + Div + Neg + Mod + Show + Eq + Compare + @quickcheck.Arbitrary
impl Integral for Int
impl Integral for Int64
impl Integral for @bigint.BigInt

