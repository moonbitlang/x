package moonbitlang/x/time

// Values
fn date_time(Int, Int, Int, ~hour : Int = .., ~minute : Int = .., ~second : Int = .., ~zone : Zone = ..) -> ZonedDateTime!Error

fn fixed_zone(String, Int) -> Zone!Error

fn unix(Int64, ~nanosecond : Int = .., ~zone : Zone = ..) -> ZonedDateTime!Error

let utc_offset : ZoneOffset

let utc_zone : Zone

// Types and methods
type Duration
impl Duration {
  add_duration(Self, Self) -> Self!Error
  add_hours(Self, Int64) -> Self!Error
  add_minutes(Self, Int64) -> Self!Error
  add_nanoseconds(Self, Int64) -> Self!Error
  add_seconds(Self, Int64) -> Self!Error
  compare(Self, Self) -> Int
  from_string(String) -> Self!Error
  is_neg(Self) -> Bool
  is_zero(Self) -> Bool
  nanoseconds(Self) -> Int
  of(~hours : Int64 = .., ~minutes : Int64 = .., ~seconds : Int64 = .., ~nanoseconds : Int64 = ..) -> Self!Error
  op_add(Self, Self) -> Self!Error
  op_equal(Self, Self) -> Bool
  seconds(Self) -> Int64
  to_nanoseconds(Self) -> Int64
  to_string(Self) -> String
  with_nanoseconds(Self, Int) -> Self!Error
  with_seconds(Self, Int64) -> Self
  zero() -> Self
}

type Period
impl Period {
  add_days(Self, Int) -> Self!Error
  add_months(Self, Int) -> Self!Error
  add_period(Self, Self) -> Self!Error
  add_weeks(Self, Int) -> Self!Error
  add_years(Self, Int) -> Self!Error
  compare(Self, Self) -> Int
  days(Self) -> Int
  from_string(String) -> Self!Error
  is_neg(Self) -> Bool
  is_zero(Self) -> Bool
  months(Self) -> Int
  multiply(Self, Int) -> Self!Error
  negated(Self) -> Self!Error
  of(~years : Int = .., ~months : Int = .., ~days : Int = ..) -> Self
  op_add(Self, Self) -> Self!Error
  op_equal(Self, Self) -> Bool
  op_sub(Self, Self) -> Self!Error
  to_string(Self) -> String
  to_total_months(Self) -> Int64
  with_days(Self, Int) -> Self
  with_months(Self, Int) -> Self
  with_years(Self, Int) -> Self
  years(Self) -> Int
  zero() -> Self
}

type PlainDate
impl PlainDate {
  add_days(Self, Int64) -> Self!Error
  add_months(Self, Int64) -> Self!Error
  add_period(Self, Period) -> Self!Error
  add_weeks(Self, Int64) -> Self!Error
  add_years(Self, Int64) -> Self!Error
  compare(Self, Self) -> Int
  day(Self) -> Int
  days_in_month(Self) -> Int
  days_in_week(Self) -> Int
  days_in_year(Self) -> Int
  era(Self) -> String
  era_year(Self) -> Int
  from_string(String) -> Self!Error
  from_unix_day(Int64) -> Self!Error
  from_year_ord(Int, Int) -> Self!Error
  in_leap_year(Self) -> Bool
  month(Self) -> Int
  months_in_year(Self) -> Int
  of(Int, Int, Int) -> Self!Error
  op_equal(Self, Self) -> Bool
  ordinal(Self) -> Int
  to_string(Self) -> String
  to_unix_day(Self) -> Int64
  until(Self, Self) -> Period!Error
  weekday(Self) -> Weekday
  with_day(Self, Int) -> Self!Error
  with_month(Self, Int) -> Self!Error
  with_ordinal(Self, Int) -> Self!Error
  with_year(Self, Int) -> Self!Error
  year(Self) -> Int
}

type PlainDateTime
impl PlainDateTime {
  add_days(Self, Int64) -> Self!Error
  add_duration(Self, Duration) -> Self!Error
  add_hours(Self, Int64) -> Self!Error
  add_minutes(Self, Int64) -> Self!Error
  add_months(Self, Int64) -> Self!Error
  add_nanoseconds(Self, Int64) -> Self!Error
  add_period(Self, Period) -> Self!Error
  add_seconds(Self, Int64) -> Self!Error
  add_weeks(Self, Int64) -> Self!Error
  add_years(Self, Int64) -> Self!Error
  compare(Self, Self) -> Int
  day(Self) -> Int
  days_in_month(Self) -> Int
  days_in_week(Self) -> Int
  days_in_year(Self) -> Int
  era(Self) -> String
  era_year(Self) -> Int
  from_string(String) -> Self!Error
  from_unix_second(Int64, Int, ZoneOffset) -> Self!Error
  hour(Self) -> Int
  in_leap_year(Self) -> Bool
  minute(Self) -> Int
  month(Self) -> Int
  months_in_year(Self) -> Int
  nanosecond(Self) -> Int
  of(Int, Int, Int, ~hour : Int = .., ~minute : Int = .., ~second : Int = .., ~nanosecond : Int = ..) -> Self!Error
  op_equal(Self, Self) -> Bool
  ordinal(Self) -> Int
  second(Self) -> Int
  to_plain_date(Self) -> PlainDate
  to_plain_time(Self) -> PlainTime
  to_string(Self) -> String
  to_unix_second(Self) -> Int64
  weekday(Self) -> Weekday
  with_day(Self, Int) -> Self!Error
  with_hour(Self, Int) -> Self!Error
  with_minute(Self, Int) -> Self!Error
  with_month(Self, Int) -> Self!Error
  with_nanosecond(Self, Int) -> Self!Error
  with_ordinal(Self, Int) -> Self!Error
  with_second(Self, Int) -> Self!Error
  with_year(Self, Int) -> Self!Error
  year(Self) -> Int
}

type PlainTime
impl PlainTime {
  add_duration(Self, Duration) -> Self!Error
  add_hours(Self, Int64) -> Self!Error
  add_minutes(Self, Int64) -> Self!Error
  add_nanoseconds(Self, Int64) -> Self!Error
  add_seconds(Self, Int64) -> Self!Error
  at_date(Self, PlainDate) -> PlainDateTime
  compare(Self, Self) -> Int
  from_nanosecond_of_day(Int64) -> Self!Error
  from_second_of_day(Int) -> Self!Error
  from_string(String) -> Self!Error
  hour(Self) -> Int
  minute(Self) -> Int
  nanosecond(Self) -> Int
  nanosecond_of_day(Self) -> Int64
  of(Int, Int, Int, Int) -> Self!Error
  op_equal(Self, Self) -> Bool
  second(Self) -> Int
  second_of_day(Self) -> Int
  to_string(Self) -> String
  until(Self, Self) -> Duration!Error
  with_hour(Self, Int) -> Self!Error
  with_minute(Self, Int) -> Self!Error
  with_nanosecond(Self, Int) -> Self!Error
  with_second(Self, Int) -> Self!Error
}

type Weekday
impl Weekday {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Zone
impl Zone {
  is_fixed(Self) -> Bool
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type ZoneOffset
impl ZoneOffset {
  compare(Self, Self) -> Int
  from_seconds(Int) -> Self!Error
  id(Self) -> String
  is_dst(Self) -> Bool
  of(~hours : Int = .., ~minutes : Int = .., ~seconds : Int = ..) -> Self!Error
  op_equal(Self, Self) -> Bool
  seconds(Self) -> Int
  to_string(Self) -> String
}

type ZonedDateTime
impl ZonedDateTime {
  add_days(Self, Int64) -> Self!Error
  add_hours(Self, Int64) -> Self!Error
  add_minutes(Self, Int64) -> Self!Error
  add_months(Self, Int64) -> Self!Error
  add_nanoseconds(Self, Int64) -> Self!Error
  add_seconds(Self, Int64) -> Self!Error
  add_weeks(Self, Int64) -> Self!Error
  add_years(Self, Int64) -> Self!Error
  day(Self) -> Int
  days_in_month(Self) -> Int
  days_in_week(Self) -> Int
  days_in_year(Self) -> Int
  era(Self) -> String
  era_year(Self) -> Int
  from_plain_datetime(PlainDateTime, ~zone : Zone = ..) -> Self
  from_unix_second(Int64, ~nanosecond : Int = .., ~zone : Zone = ..) -> Self!Error
  hour(Self) -> Int
  in_leap_year(Self) -> Bool
  minute(Self) -> Int
  month(Self) -> Int
  months_in_year(Self) -> Int
  nanosecond(Self) -> Int
  of(Int, Int, Int, ~hour : Int = .., ~minute : Int = .., ~second : Int = .., ~zone : Zone = ..) -> Self!Error
  offset(Self) -> ZoneOffset
  ordinal(Self) -> Int
  second(Self) -> Int
  to_plain_date(Self) -> PlainDate
  to_plain_date_time(Self) -> PlainDateTime
  to_plain_time(Self) -> PlainTime
  to_string(Self) -> String
  to_unix_second(Self) -> Int64
  weekday(Self) -> Weekday
  with_day(Self, Int) -> Self!Error
  with_hour(Self, Int) -> Self!Error
  with_minute(Self, Int) -> Self!Error
  with_month(Self, Int) -> Self!Error
  with_nanosecond(Self, Int) -> Self!Error
  with_ordinal(Self, Int) -> Self!Error
  with_second(Self, Int) -> Self!Error
  with_year(Self, Int) -> Self!Error
  year(Self) -> Int
  zone(Self) -> Zone
}

// Traits

// Extension Methods
impl Show for Duration

impl Show for Period

impl Show for PlainDate

impl Show for PlainDateTime

impl Show for PlainTime

impl Show for Weekday

impl Show for Zone

impl Show for ZoneOffset

impl Show for ZonedDateTime

