package "moonbitlang/x/time"

// Values
fn add_days(Period, Int) -> Period!

fn add_duration(Duration, Duration) -> Duration!

fn add_hours(Duration, Int64) -> Duration!

fn add_minutes(Duration, Int64) -> Duration!

fn add_months(Period, Int) -> Period!

fn add_nanoseconds(Duration, Int64) -> Duration!

fn add_period(Period, Period) -> Period!

fn add_seconds(Duration, Int64) -> Duration!

fn add_weeks(Period, Int) -> Period!

fn add_years(Period, Int) -> Period!

fn at_date(PlainTime, PlainDate) -> PlainDateTime

fn date_time(Int, Int, Int, hour~ : Int = .., minute~ : Int = .., second~ : Int = .., nanosecond~ : Int = .., zone~ : Zone = ..) -> ZonedDateTime!

fn day(PlainDate) -> Int

fn days(Period) -> Int

fn days_in_month(PlainDate) -> Int

fn days_in_year(PlainDate) -> Int

fn era(PlainDate) -> String

fn era_year(PlainDate) -> Int

fn fixed_zone(String, Int, abbrev~ : String = .., dst~ : Bool = ..) -> Zone!

fn id(ZoneOffset) -> String

fn in_leap_year(PlainDate) -> Bool

fn is_dst(ZoneOffset) -> Bool

fn is_fixed(Zone) -> Bool

fn is_neg(Duration) -> Bool

fn is_zero(Duration) -> Bool

fn month(PlainDate) -> Int

fn months(Period) -> Int

fn multiply(Period, Int) -> Period!

fn nanosecond_of_day(PlainTime) -> Int64

fn nanoseconds(Duration) -> Int

fn negated(Period) -> Period!

fn offset(ZonedDateTime) -> ZoneOffset

fn op_add(Duration, Duration) -> Duration!

fn op_sub(Period, Period) -> Period!

fn ordinal(PlainDate) -> Int

fn second_of_day(PlainTime) -> Int

fn seconds(Duration) -> Int64

fn to_nanoseconds(Duration) -> Int64

fn to_string(Duration) -> String

fn to_total_months(Period) -> Int64

fn to_unix_day(PlainDate) -> Int64

fn to_unix_second(PlainDateTime) -> Int64

fn unix(Int64, nanosecond~ : Int = .., zone~ : Zone = ..) -> ZonedDateTime!

let utc_offset : ZoneOffset

let utc_zone : Zone

fn weekday(PlainDate) -> Weekday

fn with_day(PlainDate, Int) -> PlainDate!

fn with_days(Period, Int) -> Period

fn with_month(PlainDate, Int) -> PlainDate!

fn with_months(Period, Int) -> Period

fn with_nanoseconds(Duration, Int) -> Duration!

fn with_ordinal(PlainDate, Int) -> PlainDate!

fn with_seconds(Duration, Int64) -> Duration

fn with_year(PlainDate, Int) -> PlainDate!

fn with_years(Period, Int) -> Period

fn year(PlainDate) -> Int

fn years(Period) -> Int

fn zone(ZonedDateTime) -> Zone

// Types and methods
type Duration
fn Duration::add_duration(Self, Self) -> Self!
fn Duration::add_hours(Self, Int64) -> Self!
fn Duration::add_minutes(Self, Int64) -> Self!
fn Duration::add_nanoseconds(Self, Int64) -> Self!
fn Duration::add_seconds(Self, Int64) -> Self!
fn Duration::from_string(String) -> Self!
fn Duration::is_neg(Self) -> Bool
fn Duration::is_zero(Self) -> Bool
fn Duration::nanoseconds(Self) -> Int
fn Duration::of(hours~ : Int64 = .., minutes~ : Int64 = .., seconds~ : Int64 = .., nanoseconds~ : Int64 = ..) -> Self!
fn Duration::op_add(Self, Self) -> Self!
fn Duration::seconds(Self) -> Int64
fn Duration::to_nanoseconds(Self) -> Int64
fn Duration::to_string(Self) -> String
fn Duration::with_nanoseconds(Self, Int) -> Self!
fn Duration::with_seconds(Self, Int64) -> Self
fn Duration::zero() -> Self
impl Compare for Duration
impl Eq for Duration
impl Show for Duration

type Period
fn Period::add_days(Self, Int) -> Self!
fn Period::add_months(Self, Int) -> Self!
fn Period::add_period(Self, Self) -> Self!
fn Period::add_weeks(Self, Int) -> Self!
fn Period::add_years(Self, Int) -> Self!
fn Period::days(Self) -> Int
fn Period::from_string(String) -> Self!
fn Period::is_neg(Self) -> Bool
fn Period::is_zero(Self) -> Bool
fn Period::months(Self) -> Int
fn Period::multiply(Self, Int) -> Self!
fn Period::negated(Self) -> Self!
fn Period::of(years~ : Int = .., months~ : Int = .., days~ : Int = ..) -> Self
fn Period::op_add(Self, Self) -> Self!
fn Period::op_sub(Self, Self) -> Self!
fn Period::to_string(Self) -> String
fn Period::to_total_months(Self) -> Int64
fn Period::with_days(Self, Int) -> Self
fn Period::with_months(Self, Int) -> Self
fn Period::with_years(Self, Int) -> Self
fn Period::years(Self) -> Int
fn Period::zero() -> Self
impl Compare for Period
impl Eq for Period
impl Show for Period

type PlainDate
fn PlainDate::add_days(Self, Int64) -> Self!
fn PlainDate::add_months(Self, Int64) -> Self!
fn PlainDate::add_period(Self, Period) -> Self!
fn PlainDate::add_weeks(Self, Int64) -> Self!
fn PlainDate::add_years(Self, Int64) -> Self!
fn PlainDate::day(Self) -> Int
fn PlainDate::days_in_month(Self) -> Int
fn PlainDate::days_in_week(Self) -> Int
fn PlainDate::days_in_year(Self) -> Int
fn PlainDate::era(Self) -> String
fn PlainDate::era_year(Self) -> Int
fn PlainDate::from_string(String) -> Self!
fn PlainDate::from_unix_day(Int64) -> Self!
fn PlainDate::from_year_ord(Int, Int) -> Self!
fn PlainDate::in_leap_year(Self) -> Bool
fn PlainDate::month(Self) -> Int
fn PlainDate::months_in_year(Self) -> Int
fn PlainDate::of(Int, Int, Int) -> Self!
fn PlainDate::ordinal(Self) -> Int
fn PlainDate::to_string(Self) -> String
fn PlainDate::to_unix_day(Self) -> Int64
fn PlainDate::until(Self, Self) -> Period!
fn PlainDate::weekday(Self) -> Weekday
fn PlainDate::with_day(Self, Int) -> Self!
fn PlainDate::with_month(Self, Int) -> Self!
fn PlainDate::with_ordinal(Self, Int) -> Self!
fn PlainDate::with_year(Self, Int) -> Self!
fn PlainDate::year(Self) -> Int
impl Compare for PlainDate
impl Eq for PlainDate
impl Show for PlainDate

type PlainDateTime
fn PlainDateTime::add_days(Self, Int64) -> Self!
fn PlainDateTime::add_duration(Self, Duration) -> Self!
fn PlainDateTime::add_hours(Self, Int64) -> Self!
fn PlainDateTime::add_minutes(Self, Int64) -> Self!
fn PlainDateTime::add_months(Self, Int64) -> Self!
fn PlainDateTime::add_nanoseconds(Self, Int64) -> Self!
fn PlainDateTime::add_period(Self, Period) -> Self!
fn PlainDateTime::add_seconds(Self, Int64) -> Self!
fn PlainDateTime::add_weeks(Self, Int64) -> Self!
fn PlainDateTime::add_years(Self, Int64) -> Self!
fn PlainDateTime::day(Self) -> Int
fn PlainDateTime::days_in_month(Self) -> Int
fn PlainDateTime::days_in_week(Self) -> Int
fn PlainDateTime::days_in_year(Self) -> Int
fn PlainDateTime::era(Self) -> String
fn PlainDateTime::era_year(Self) -> Int
fn PlainDateTime::from_string(String) -> Self!
fn PlainDateTime::from_unix_second(Int64, Int, ZoneOffset) -> Self!
fn PlainDateTime::hour(Self) -> Int
fn PlainDateTime::in_leap_year(Self) -> Bool
fn PlainDateTime::minute(Self) -> Int
fn PlainDateTime::month(Self) -> Int
fn PlainDateTime::months_in_year(Self) -> Int
fn PlainDateTime::nanosecond(Self) -> Int
fn PlainDateTime::of(Int, Int, Int, hour~ : Int = .., minute~ : Int = .., second~ : Int = .., nanosecond~ : Int = ..) -> Self!
fn PlainDateTime::ordinal(Self) -> Int
fn PlainDateTime::second(Self) -> Int
fn PlainDateTime::to_plain_date(Self) -> PlainDate
fn PlainDateTime::to_plain_time(Self) -> PlainTime
fn PlainDateTime::to_string(Self) -> String
fn PlainDateTime::to_unix_second(Self) -> Int64
fn PlainDateTime::weekday(Self) -> Weekday
fn PlainDateTime::with_day(Self, Int) -> Self!
fn PlainDateTime::with_hour(Self, Int) -> Self!
fn PlainDateTime::with_minute(Self, Int) -> Self!
fn PlainDateTime::with_month(Self, Int) -> Self!
fn PlainDateTime::with_nanosecond(Self, Int) -> Self!
fn PlainDateTime::with_ordinal(Self, Int) -> Self!
fn PlainDateTime::with_second(Self, Int) -> Self!
fn PlainDateTime::with_year(Self, Int) -> Self!
fn PlainDateTime::year(Self) -> Int
impl Compare for PlainDateTime
impl Eq for PlainDateTime
impl Show for PlainDateTime

type PlainTime
fn PlainTime::add_duration(Self, Duration) -> Self!
fn PlainTime::add_hours(Self, Int64) -> Self!
fn PlainTime::add_minutes(Self, Int64) -> Self!
fn PlainTime::add_nanoseconds(Self, Int64) -> Self!
fn PlainTime::add_seconds(Self, Int64) -> Self!
fn PlainTime::at_date(Self, PlainDate) -> PlainDateTime
fn PlainTime::from_nanosecond_of_day(Int64) -> Self!
fn PlainTime::from_second_of_day(Int) -> Self!
fn PlainTime::from_string(String) -> Self!
fn PlainTime::hour(Self) -> Int
fn PlainTime::minute(Self) -> Int
fn PlainTime::nanosecond(Self) -> Int
fn PlainTime::nanosecond_of_day(Self) -> Int64
fn PlainTime::of(Int, Int, Int, Int) -> Self!
fn PlainTime::second(Self) -> Int
fn PlainTime::second_of_day(Self) -> Int
fn PlainTime::to_string(Self) -> String
fn PlainTime::until(Self, Self) -> Duration!
fn PlainTime::with_hour(Self, Int) -> Self!
fn PlainTime::with_minute(Self, Int) -> Self!
fn PlainTime::with_nanosecond(Self, Int) -> Self!
fn PlainTime::with_second(Self, Int) -> Self!
impl Compare for PlainTime
impl Eq for PlainTime
impl Show for PlainTime

pub(all) enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
impl Eq for Weekday
impl Show for Weekday

type Zone
fn Zone::from_tzif2(String, FixedArray[Byte]) -> Self!
fn Zone::is_fixed(Self) -> Bool
fn Zone::to_string(Self) -> String
impl Eq for Zone
impl Show for Zone

type ZoneOffset
fn ZoneOffset::abbreviation(Self) -> String
fn ZoneOffset::from_seconds(Int, abbrev~ : String = .., dst~ : Bool = ..) -> Self!
fn ZoneOffset::id(Self) -> String
fn ZoneOffset::is_dst(Self) -> Bool
fn ZoneOffset::of(hours~ : Int = .., minutes~ : Int = .., seconds~ : Int = .., abbrev~ : String = .., dst~ : Bool = ..) -> Self!
fn ZoneOffset::seconds(Self) -> Int
fn ZoneOffset::to_string(Self) -> String
impl Compare for ZoneOffset
impl Eq for ZoneOffset
impl Show for ZoneOffset

type ZonedDateTime
fn ZonedDateTime::add_days(Self, Int64) -> Self!
fn ZonedDateTime::add_hours(Self, Int64) -> Self!
fn ZonedDateTime::add_minutes(Self, Int64) -> Self!
fn ZonedDateTime::add_months(Self, Int64) -> Self!
fn ZonedDateTime::add_nanoseconds(Self, Int64) -> Self!
fn ZonedDateTime::add_seconds(Self, Int64) -> Self!
fn ZonedDateTime::add_weeks(Self, Int64) -> Self!
fn ZonedDateTime::add_years(Self, Int64) -> Self!
fn ZonedDateTime::day(Self) -> Int
fn ZonedDateTime::days_in_month(Self) -> Int
fn ZonedDateTime::days_in_week(Self) -> Int
fn ZonedDateTime::days_in_year(Self) -> Int
fn ZonedDateTime::era(Self) -> String
fn ZonedDateTime::era_year(Self) -> Int
fn ZonedDateTime::from_plain_datetime(PlainDateTime, zone~ : Zone = ..) -> Self
fn ZonedDateTime::from_unix_second(Int64, nanosecond~ : Int = .., zone~ : Zone = ..) -> Self!
fn ZonedDateTime::hour(Self) -> Int
fn ZonedDateTime::in_leap_year(Self) -> Bool
fn ZonedDateTime::minute(Self) -> Int
fn ZonedDateTime::month(Self) -> Int
fn ZonedDateTime::months_in_year(Self) -> Int
fn ZonedDateTime::nanosecond(Self) -> Int
fn ZonedDateTime::of(Int, Int, Int, hour~ : Int = .., minute~ : Int = .., second~ : Int = .., nanosecond~ : Int = .., zone~ : Zone = ..) -> Self!
fn ZonedDateTime::offset(Self) -> ZoneOffset
fn ZonedDateTime::ordinal(Self) -> Int
fn ZonedDateTime::second(Self) -> Int
fn ZonedDateTime::to_plain_date(Self) -> PlainDate
fn ZonedDateTime::to_plain_date_time(Self) -> PlainDateTime
fn ZonedDateTime::to_plain_time(Self) -> PlainTime
fn ZonedDateTime::to_string(Self) -> String
fn ZonedDateTime::to_unix_second(Self) -> Int64
fn ZonedDateTime::weekday(Self) -> Weekday
fn ZonedDateTime::with_day(Self, Int) -> Self!
fn ZonedDateTime::with_hour(Self, Int) -> Self!
fn ZonedDateTime::with_minute(Self, Int) -> Self!
fn ZonedDateTime::with_month(Self, Int) -> Self!
fn ZonedDateTime::with_nanosecond(Self, Int) -> Self!
fn ZonedDateTime::with_ordinal(Self, Int) -> Self!
fn ZonedDateTime::with_second(Self, Int) -> Self!
fn ZonedDateTime::with_year(Self, Int) -> Self!
fn ZonedDateTime::year(Self) -> Int
fn ZonedDateTime::zone(Self) -> Zone
impl Show for ZonedDateTime

// Type aliases

// Traits

