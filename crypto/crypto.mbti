package "moonbitlang/x/crypto"

// Values
fn bytes_to_hex_string(FixedArray[Byte]) -> String

fn chacha12(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn chacha20(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn chacha8(FixedArray[UInt], UInt, FixedArray[Byte], nonce~ : UInt = ..) -> FixedArray[Byte]!

fn finalize(Sha256Context) -> FixedArray[Byte]

fn md5(FixedArray[Byte]) -> FixedArray[Byte]

fn sha1(FixedArray[Byte]) -> FixedArray[Byte]

fn sha224(FixedArray[Byte]) -> FixedArray[Byte]

fn sha224_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn sha256(FixedArray[Byte]) -> FixedArray[Byte]

fn sha256_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn sm3(FixedArray[Byte]) -> FixedArray[Byte]

fn sm3_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn uints_to_hex_string(Iter[UInt]) -> String

fn update(Sha256Context, FixedArray[Byte]) -> Unit

fn update_from_iter(Sha256Context, Iter[Byte]) -> Unit

// Types and methods
type MD5Context
fn MD5Context::finalize(Self) -> FixedArray[Byte]
fn MD5Context::new() -> Self
fn MD5Context::update(Self, FixedArray[Byte]) -> Unit

type SM3Context
fn SM3Context::finalize(Self) -> FixedArray[Byte]
fn SM3Context::new() -> Self
fn SM3Context::update(Self, FixedArray[Byte]) -> Unit
fn SM3Context::update_from_iter(Self, Iter[Byte]) -> Unit

type Sha256Context
fn Sha256Context::finalize(Self) -> FixedArray[Byte]
fn Sha256Context::new(reg~ : FixedArray[UInt] = ..) -> Self
fn Sha256Context::update(Self, FixedArray[Byte]) -> Unit
fn Sha256Context::update_from_iter(Self, Iter[Byte]) -> Unit

// Type aliases

// Traits

