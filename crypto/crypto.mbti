// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/x/crypto"

import(
  "moonbitlang/core/bytes"
)

// Values
fn bytes_to_hex_string(FixedArray[Byte]) -> String

fn[Data : ByteSource] chacha12(FixedArray[UInt], UInt, Data, nonce~ : UInt = ..) -> FixedArray[Byte] raise

fn[Data : ByteSource] chacha20(FixedArray[UInt], UInt, Data, nonce~ : UInt = ..) -> FixedArray[Byte] raise

fn[Data : ByteSource] chacha8(FixedArray[UInt], UInt, Data, nonce~ : UInt = ..) -> FixedArray[Byte] raise

fn[Data : ByteSource] md5(Data) -> FixedArray[Byte]

fn[Data : ByteSource] sha1(Data) -> FixedArray[Byte]

fn[Data : ByteSource] sha224(Data) -> FixedArray[Byte]

fn sha224_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn[Data : ByteSource] sha256(Data) -> FixedArray[Byte]

fn sha256_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn[Data : ByteSource] sm3(Data) -> FixedArray[Byte]

fn sm3_from_iter(Iter[Byte]) -> FixedArray[Byte]

fn uints_to_hex_string(Iter[UInt]) -> String

// Types and methods
type MD5Context
fn MD5Context::finalize(Self) -> FixedArray[Byte]
fn MD5Context::new() -> Self
fn[Data : ByteSource] MD5Context::update(Self, Data) -> Unit

type SM3Context
fn SM3Context::finalize(Self) -> FixedArray[Byte]
fn SM3Context::new() -> Self
fn[Data : ByteSource] SM3Context::update(Self, Data) -> Unit
fn SM3Context::update_from_iter(Self, Iter[Byte]) -> Unit

type Sha256Context
fn Sha256Context::finalize(Self) -> FixedArray[Byte]
fn Sha256Context::new(reg~ : FixedArray[UInt] = ..) -> Self
fn[Data : ByteSource] Sha256Context::update(Self, Data) -> Unit
fn Sha256Context::update_from_iter(Self, Iter[Byte]) -> Unit

// Type aliases

// Traits
trait ByteSource
impl ByteSource for FixedArray[Byte]
impl ByteSource for Bytes
impl ByteSource for @bytes.View

